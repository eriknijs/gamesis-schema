openapi: 3.0.1
info:
  title: gamesis Story API
  version: "${version}"
paths:
  /event/{id}:
    get:
      tags:
        - event
      operationId: getEvent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'  
    put:
      tags:
        - event
      operationId: updateEvent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Event'
        required: true
      responses:
        '200':
          description: OK
    delete:
      tags:
        - event
      operationId: deleteEvent
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /event/{id}/comment:
    post:
      tags:
        - event
      operationId: addEventComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: text
          in: query
          required: true
          schema:
            type: string
        - name: characters
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /event/{id}/comment/{timestamp}:
    delete:
      tags:
        - event
      operationId: deleteComment
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /roll:
    post:
      tags:
        - story
      operationId: addRoll
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Roll'
        required: true
      responses:
        '200':
          description: OK
  /message:
    post:
      tags:
        - story
      operationId: message
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Message'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /image:
    post:
      tags:
        - story
      operationId: addImage
      requestBody:
        content:
          multipart/form-data:
            schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /gallery/convert:
    post:
      tags:
        - gallery
      operationId: convert
      responses:
        '200':
          description: OK
  /gallery/{page}:
    get:
      tags:
        - gallery
      operationId: read
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedImages'
  /comment:
    post:
      tags:
        - story
      operationId: addComment
      parameters:
        - name: text
          in: query
          required: true
          schema:
            type: string
        - name: characters
          in: query
          required: false
          schema:
            type: array
            items:
              type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Comment'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /action:
    post:
      tags:
        - story
      operationId: addAction
      parameters:
        - name: text
          in: query
          required: true
          schema:
            type: string
        - name: character
          in: query
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ActionDTO'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /action/{id}/item/{timestamp}:
    delete:
      tags:
        - story
      operationId: deleteActionItem
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: timestamp
          in: path
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: OK
  /action/{id}/reaction:
    post:
      tags:
        - story
      operationId: addReaction
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
        - name: text
          in: query
          required: true
          schema:
            type: string
        - name: finished
          in: query
          required: true
          schema:
            type: boolean
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /story:
    get:
      tags:
        - story
      operationId: fullTimeline
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedEvents'
    post:
      tags:
        - story
      operationId: addStory
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Story'
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
  /story/{page}:
    get:
      tags:
        - story
      operationId: pagedTimeline
      parameters:
        - name: page
          in: path
          required: true
          schema:
            type: integer
            format: int32
        - name: search
          in: query
          required: false
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagedEvents'
  /story/characters:
    get:
      tags:
        - characters
      operationId: getActiveCharacters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /characters:
    get:
      tags:
        - characters
      operationId: getCharacters
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Character'
    post:
      tags:
        - characters
      operationId: createCharacter
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        '200':
          description: OK
  /characters/{character}:
    get:
      tags:
        - characters
      operationId: getCharacter
      parameters:
        - name: character
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Character'
    put:
      tags:
        - characters
      operationId: updateCharacter
      parameters:
        - name: character
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Character'
        required: true
      responses:
        '200':
          description: OK
    delete:
      tags:
        - characters
      operationId: deleteCharacter
      parameters:
        - name: character
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /characters/{character}/state:
    post:
      tags:
        - characters
      operationId: state
      parameters:
        - name: character
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: string
      responses:
        '200':
          description: OK
  /characters/{character}/avatar:
    post:
      tags:
        - characters
      operationId: avatar
      parameters:
        - name: character
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          multipart/form-data:
            schema:
                type: object
                properties:
                  file:
                    type: string
                    format: binary
      responses:
        '200':
          description: OK
  /characters/{character}/rolls:
    get:
      tags:
        - characters
      operationId: getRolls
      parameters:
        - name: character
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Roll'
  /characters/{character}/rolls/{name}:
    delete:
      tags:
        - characters
      operationId: deleteRoll
      parameters:
        - name: character
          in: path
          required: true
          schema:
            type: string
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
  /characters/me:
    get:
      tags:
        - characters
      operationId: me
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /campaign:
    get:
      tags:
        - campaign
      operationId: readCampaign
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Campaign'
  /campaign/{name}:
    delete:
      tags:
        - campaign
      operationId: deleteCampaign
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK

components:
  schemas:
    ActionDTO:
      type: object
      properties:
        text:
          type: string
        character:
          type: string
    Dice:
        type: object
        properties:
            100:
                type: integer
                format: int32
                minimum: 0
            20:
                type: integer
                format: int32
                minimum: 0
            12:
                type: integer
                format: int32
                minimum: 0
            10:
                type: integer
                format: int32
                minimum: 0
            8:
                type: integer
                format: int32
                minimum: 0
            6:
                type: integer
                format: int32
                minimum: 0
            4:
                type: integer
                format: int32
                minimum: 0
            2:
                type: integer
                format: int32
                minimum: 0
    Roll:
      type: object
      properties:
        text:
          type: string
        dice:
          $ref: '#/components/schemas/Dice'
        modifier:
          type: integer
          format: int32
        type:
          type: string
          enum:
            - NORMAL
            - DISADVANTAGE
            - ADVANTAGE
        character:
          type: string
        persist:
          type: boolean
          writeOnly: true
    AbstractEvent:
      required:
        - type
        - player
      type: object
      properties:
        id:
          type: string
        type:
          type: string
        player:
          type: string
        created:
          type: string
          format: date-time
        updated:
          type: string
          format: date-time
        comments:
          type: array
          items:
            type: object
            properties:
              text:
                type: string
              player:
                type: string
              created:
                type: string
                format: date-time
              type:
                type: string
      discriminator:
        propertyName: type
    ActionRoll:
        type: object
        properties:
          formula:
            type: string
          description:
            type: string
          timestamp:
            type: string
            format: date-time
          result:
            type: integer
            format: int32 
    ActionText:
        type: object
        properties:
          text:
              type: string
          gameMaster:
              type: boolean
          timestamp:
              type: string
              format: date-time
    Action:
        type: object
        properties:
            character:
              type: string
            text:
              type: array
              items:
                $ref: '#/components/schemas/ActionText'
            rolls:
                type: array
                items:
                    $ref: '#/components/schemas/ActionRoll'
            finished:
              type: boolean
        allOf:
            - $ref: '#/components/schemas/AbstractEvent'
          
    Comment:
        type: object
        properties:
            text:
              type: string
            characters:
              type: array
              items:
                type: string
        allOf:
            - $ref: '#/components/schemas/AbstractEvent'
    Image:
        type: object
        properties:
            data:
                type: string
            original:
                type: string
      
        allOf:
            - $ref: '#/components/schemas/AbstractEvent'

    Message:
        type: object
        properties:
            text:
                type: string
            character:
                type: string
            characters:
                type: array
                items:
                    type: string
        allOf:
            - $ref: '#/components/schemas/AbstractEvent'

    Story:
        type: object
        properties:
            text:
                type: string
            characters:
                type: array
                items:
                    type: string
        allOf:
            - $ref: '#/components/schemas/AbstractEvent'

    PagedEvents:
      type: object
      properties:
        count:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    PagedImages:
      type: object
      properties:
        count:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: '#/components/schemas/Image'
    Character:
      type: object
      properties:
        name:
          type: string
        initials:
          type: string
        xp:
          type: integer
          format: int32
        players:
          type: array
          items:
            type: string
        inactive:
          type: boolean
        description:
          type: string
        avatar:
          type: string
        playingCharacter:
          type: boolean
    Campaign:
      type: object
      properties:
        title:
          type: string
        characters:
          type: array
          items:
            $ref: '#/components/schemas/Character'
        events:
          type: array
          items:
            $ref: '#/components/schemas/Event'
    Event:
      oneOf:
        - $ref: '#/components/schemas/Action'
        - $ref: '#/components/schemas/Comment'
        - $ref: '#/components/schemas/Image'
        - $ref: '#/components/schemas/Message'
        - $ref: '#/components/schemas/Story'
      discriminator:
        propertyName: type
        mapping:
          Action: '#/components/schemas/Action'
          Comment: '#/components/schemas/Comment'
          Image: '#/components/schemas/Image'
          Message: '#/components/schemas/Message'
          Story: '#/components/schemas/Story'